import re
import asyncpg
from auth_data import HOST, USER, PASSWORD, DB_NAME, ADMINS
from bot_create import dp, bot
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards.kb_status_seo import kb_status
from auth_data import SEO_CHAT_ID, QUEUEINFO_CHAT_ID


class Sendlinkyoutube(StatesGroup):
    step1 = State()


@dp.message_handler(state=Sendlinkyoutube.step1)
async def seoboost_create_exp(message: types.Message, state: FSMContext):
    sql = await asyncpg.connect(
        host=HOST,
        user=USER,
        password=PASSWORD,
        database=DB_NAME
    )
    usercash = await sql.fetch(f"SELECT cash FROM users WHERE id = {message.from_user.id}")
    queueinfo = await sql.fetch("SELECT queueID from queue")
    if usercash[0][0] < 150:
        await message.answer('<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!</b>',
                             parse_mode="html")
        await state.finish()
        return
    if queueinfo[0][0] == 5:
        await message.answer('<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ SEO, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!</b>',
                             parse_mode="html")
        await state.finish()
        return
    try:
        link = re.search(r"(?P<url>https?://\S+)", message.text).group("url")
        if str(link) == str(message.text):
            if usercash[0][0] >= 150 and queueinfo[0][0] < 5:
                await seoboostsend(message)
                await state.finish()
        else:
            await message.answer('<b>–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>', parse_mode="html")
            await state.finish()
    except(Exception,):
        await message.answer("<b>–≠—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–± –≤–∏–¥–µ–æ!</b>",
                             parse_mode="html")
        await state.finish()
        await sql.close()


async def seoboostsend(message: types.Message):
    try:
        sql = await asyncpg.connect(
            host=HOST,
            user=USER,
            password=PASSWORD,
            database=DB_NAME
        )
        await sql.execute(
            f"INSERT INTO links (linkyoutube, linkid, linksender) VALUES "
            f"('{message.text}', NEXTVAL('links_linkid_seq'), '{message.from_user.id}')")
        await sql.execute(f"UPDATE users SET cash = (cash - 150) WHERE id = {message.from_user.id}")
        await sql.execute("UPDATE queue SET queueID = (queueID + 1)")
        await message.answer(
            '<b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É SEO. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ 150 —Ä—É–±–ª–µ–π.</b>',
            parse_mode="html")
        queueinfo = await sql.fetch("SELECT queueID from queue")
        linkid = await sql.fetch(f"SELECT linkID FROM links WHERE linkYoutube = '{message.text}'")
        await sql.execute("UPDATE stats SET all_requests = (all_requests + 1)")
        await bot.send_message(SEO_CHAT_ID,
                               '<b>‚û° –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ SEO ‚Ññ{0} üìà </b>'
                               '\nüìπ–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {1}\nüîë –ê–π–¥–∏: {2}\nüë§–ò–º—è: {3}\nüë§–ó–∞–∫–∞–∑—á–∏–∫: @{4}'.format(
                                   linkid[0][0], message.text, message.from_user.id,
                                   message.from_user.first_name,
                                   message.from_user.username), parse_mode="html", reply_markup=kb_status)
        await bot.send_message(QUEUEINFO_CHAT_ID,
                               f'<b>[‚öô] –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ SEO, –≤ –æ—á–µ—Ä–µ–¥–∏ {queueinfo[0][0]} —á–µ–ª–æ–≤–µ–∫(–∞). '
                               f'\n–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {5 - queueinfo[0][0]} —à—Ç.</b>',
                               parse_mode="html")
        await sql.close()
    except Exception as error:
        await bot.send_message(int(ADMINS[0]), f'<b>–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! \n–û–ø–∏—Å–∞–Ω–∏–µ: {error}</b>',
                               parse_mode="html")
